name: Production Deployment Pipeline
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: '–í–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è'
        required: true
        type: string

jobs:
  verify-image:
    name: Verify Docker Image Exists
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Authenticate with Container Registry
        env:
          PA_OAUTH_TOKEN: ${{ secrets.PA_OAUTH_TOKEN }}
        run: |
          echo "$PA_OAUTH_TOKEN" | docker login \
            --username oauth \
            --password-stdin \
            cr.yandex
          
          IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
          if docker manifest inspect $REGISTRY/app:$IMAGE_TAG > /dev/null; then
            echo "Image $REGISTRY/app:$IMAGE_TAG exists"
          else
            echo "Error: Image $REGISTRY/app:$IMAGE_TAG not found!"
            exit 1
          fi

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: verify-image
    env:
      REGISTRY: ${{ secrets.REGISTRY_ID }}
    steps:
      - name: Execute Deployment via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VM_IP }}
          username: papchenko_x
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo chmod 666 /var/run/docker.sock || true
            
            echo "${{ secrets.PA_OAUTH_TOKEN }}" | docker login \
              --username oauth \
              --password-stdin \
              cr.yandex
            
            IMAGE_TAG="${{ github.event.inputs.release_version }}_latest"
            docker pull ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            docker stop app || true
            docker rm app || true
            
            docker run -d \
              --name app \
              -p 3000:3000 \
              ${{ env.REGISTRY }}/app:$IMAGE_TAG
            
            sleep 5
            docker ps --filter "name=app" --format "table {{.Names}}\t{{.Status}}"
            echo "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://89.169.189.241:3000/hw/store"
      - name: Update Release Tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BASE_VERSION=$(echo "${{ github.event.inputs.release_version }}" | sed 's/_fix.*//')

          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues?state=all")

          ISSUE_ID=$(echo "$RESPONSE" | jq -r --arg title "Release v$BASE_VERSION" '.[] | select(.title == $title) | .number')

          if [ -z "$ISSUE_ID" ]; then
            NEW_ISSUE_JSON='{"title":"Release v'$BASE_VERSION'", "body":"Automatic issue created for deployment tracking"}'
            NEW_ISSUE=$(curl -s -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              -d "$NEW_ISSUE_JSON" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            ISSUE_ID=$(echo "$NEW_ISSUE" | jq -r '.number')
            echo "Created new issue #$ISSUE_ID"
          fi

          COMMENT=$(cat <<EOF
          üöÄ **–ó–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥**

          **–í–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞:** ${{ github.event.inputs.release_version }}
          **–î–∞—Ç–∞:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          **–ê–≤—Ç–æ—Ä:** ${{ github.actor }}
          **Docker image:** ${{ env.REGISTRY }}/app:${{ github.event.inputs.release_version }}_latest
          EOF
          )

          ESCAPED_COMMENT=$(jq -n --arg comment "$COMMENT" '$comment')

          COMMENT_JSON="{\"body\":$ESCAPED_COMMENT}"

          curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -d "$COMMENT_JSON" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_ID/comments"

          echo "Added deployment comment to issue #$ISSUE_ID"
